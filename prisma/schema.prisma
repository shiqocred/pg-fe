// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CabangRole {
  ALL
  PUTRA1
  PUTRA3
  PUTRA4
  PUTRA5
  PUTRA6
  PUTRA7
  PUTRI1
  PUTRI2
  PUTRI3
  PUTRI4
  PUTRI7
}

model Profile {
  id       String     @id @default(cuid())
  username Int
  password String
  waktu    String?
  tanggal  String?
  tempat   String?
  heroUrl  String?
  cabang   CabangRole

  posts       Post[]
  caegories   Category[]
  videos      Video[]
  roundowns   Roundown[]
  posters     Poster[]
  supervisors Supervisor[]
  photos      Photo[]
  sponsors    Sponsor[]
  faqs        Faq[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Category {
  id   String @id @default(cuid())
  name String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  posts   Post[]
  videos  Video[]
  posters Poster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}

model Post {
  id        String  @id @default(cuid())
  title     String
  highlight String  @db.Text
  article   String  @db.Text
  imageUrl  String  @db.Text
  author    String
  isPublish Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
  @@index([categoryId])
}

model Video {
  id           String  @id @default(cuid())
  title        String
  videoUrl     String  @db.Text
  thumbnailUrl String  @db.Text
  isPublish    Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
  @@index([categoryId])
}

model Poster {
  id        String  @id @default(cuid())
  title     String
  posterUrl String  @db.Text
  isPublish Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
  @@index([categoryId])
}

model Roundown {
  id       String  @id @default(cuid())
  title    String
  imageUrl String?
  position Int

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}

enum PositionSupervisor {
  CHIEF
  STAFF
}

model Supervisor {
  id       String             @id @default(cuid())
  name     String
  imageUrl String?
  position PositionSupervisor

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}

model Photo {
  id       String  @id @default(cuid())
  imageUrl String?

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}

enum SponsorEnum {
  TUNGGAL
  UTAMA
  PENDAMPING1
  PENDAMPING2
  PENDAMPING3
}

model Sponsor {
  id       String      @id @default(cuid())
  name     String
  imageUrl String?
  href     String?
  position SponsorEnum

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}

model Faq {
  id       String @id @default(cuid())
  question String @db.Text
  answer   String @db.Text
  position Int

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}
