// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum CabangRole {
  ALL
  PUTRA1
  PUTRA3
  PUTRA4
  PUTRA5
  PUTRA6
  PUTRA7
  PUTRI1
  PUTRI2
  PUTRI3
  PUTRI4
  PUTRI7
}

model Profile {
  id       String     @id @default(cuid())
  username Int
  password String
  cabang   CabangRole

  posts     Post[]
  caegories Category[]
  videos    Video[]
  roundowns Roundown[]
  posters   Poster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Category {
  id   String @id @default(cuid())
  name String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  posts   Post[]
  videos  Video[]
  posters Poster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}

model Post {
  id        String  @id @default(cuid())
  title     String
  highlight String  @db.Text
  article   String  @db.Text
  imageUrl  String  @db.Text
  author    String
  isPublish Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
  @@index([categoryId])
}

model Video {
  id          String  @id @default(cuid())
  title       String
  description String  @db.Text
  videoUrl    String  @db.Text
  isPublish   Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
  @@index([categoryId])
}

model Poster {
  id          String  @id @default(cuid())
  title       String
  description String  @db.Text
  posterUrl   String  @db.Text
  isPublish   Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
  @@index([categoryId])
}

model Roundown {
  id       String  @id @default(cuid())
  title    String
  imageUrl String?
  position Int

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([profileId])
}
